#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IoTWebApi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Comsoft1")]
	public partial class IoTDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertItemDeployed(ItemDeployed instance);
    partial void UpdateItemDeployed(ItemDeployed instance);
    partial void DeleteItemDeployed(ItemDeployed instance);
    partial void InsertItemIssue(ItemIssue instance);
    partial void UpdateItemIssue(ItemIssue instance);
    partial void DeleteItemIssue(ItemIssue instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertSubType(SubType instance);
    partial void UpdateSubType(SubType instance);
    partial void DeleteSubType(SubType instance);
    #endregion
		
		public IoTDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Comsoft1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IoTDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IoTDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IoTDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IoTDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<ItemDeployed> ItemDeployeds
		{
			get
			{
				return this.GetTable<ItemDeployed>();
			}
		}
		
		public System.Data.Linq.Table<ItemIssue> ItemIssues
		{
			get
			{
				return this.GetTable<ItemIssue>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<SubType> SubTypes
		{
			get
			{
				return this.GetTable<SubType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _itemID;
		
		private int _subTypeID;
		
		private string _itemNote;
		
		private string _imageUrl;
		
		private EntitySet<ItemDeployed> _ItemDeployeds;
		
		private EntitySet<ItemIssue> _ItemIssues;
		
		private EntityRef<SubType> _SubType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void OnsubTypeIDChanging(int value);
    partial void OnsubTypeIDChanged();
    partial void OnitemNoteChanging(string value);
    partial void OnitemNoteChanged();
    partial void OnimageUrlChanging(string value);
    partial void OnimageUrlChanged();
    #endregion
		
		public Item()
		{
			this._ItemDeployeds = new EntitySet<ItemDeployed>(new Action<ItemDeployed>(this.attach_ItemDeployeds), new Action<ItemDeployed>(this.detach_ItemDeployeds));
			this._ItemIssues = new EntitySet<ItemIssue>(new Action<ItemIssue>(this.attach_ItemIssues), new Action<ItemIssue>(this.detach_ItemIssues));
			this._SubType = default(EntityRef<SubType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTypeID", DbType="Int NOT NULL")]
		public int subTypeID
		{
			get
			{
				return this._subTypeID;
			}
			set
			{
				if ((this._subTypeID != value))
				{
					if (this._SubType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubTypeIDChanging(value);
					this.SendPropertyChanging();
					this._subTypeID = value;
					this.SendPropertyChanged("subTypeID");
					this.OnsubTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemNote", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string itemNote
		{
			get
			{
				return this._itemNote;
			}
			set
			{
				if ((this._itemNote != value))
				{
					this.OnitemNoteChanging(value);
					this.SendPropertyChanging();
					this._itemNote = value;
					this.SendPropertyChanged("itemNote");
					this.OnitemNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageUrl", DbType="VarChar(100)")]
		public string imageUrl
		{
			get
			{
				return this._imageUrl;
			}
			set
			{
				if ((this._imageUrl != value))
				{
					this.OnimageUrlChanging(value);
					this.SendPropertyChanging();
					this._imageUrl = value;
					this.SendPropertyChanged("imageUrl");
					this.OnimageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemDeployed", Storage="_ItemDeployeds", ThisKey="itemID", OtherKey="itemID")]
		public EntitySet<ItemDeployed> ItemDeployeds
		{
			get
			{
				return this._ItemDeployeds;
			}
			set
			{
				this._ItemDeployeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemIssue", Storage="_ItemIssues", ThisKey="itemID", OtherKey="itemID")]
		public EntitySet<ItemIssue> ItemIssues
		{
			get
			{
				return this._ItemIssues;
			}
			set
			{
				this._ItemIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubType_Item", Storage="_SubType", ThisKey="subTypeID", OtherKey="subTypeID", IsForeignKey=true)]
		public SubType SubType
		{
			get
			{
				return this._SubType.Entity;
			}
			set
			{
				SubType previousValue = this._SubType.Entity;
				if (((previousValue != value) 
							|| (this._SubType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubType.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._SubType.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._subTypeID = value.subTypeID;
					}
					else
					{
						this._subTypeID = default(int);
					}
					this.SendPropertyChanged("SubType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemDeployeds(ItemDeployed entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemDeployeds(ItemDeployed entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ItemIssues(ItemIssue entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemIssues(ItemIssue entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private string _typeName;
		
		private EntitySet<SubType> _SubTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    #endregion
		
		public Type()
		{
			this._SubTypes = new EntitySet<SubType>(new Action<SubType>(this.attach_SubTypes), new Action<SubType>(this.detach_SubTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_SubType", Storage="_SubTypes", ThisKey="typeID", OtherKey="typeID")]
		public EntitySet<SubType> SubTypes
		{
			get
			{
				return this._SubTypes;
			}
			set
			{
				this._SubTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubTypes(SubType entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_SubTypes(SubType entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemDeployed")]
	public partial class ItemDeployed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _deployedID;
		
		private int _itemID;
		
		private int _projectID;
		
		private string _location;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _notes;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndeployedIDChanging(int value);
    partial void OndeployedIDChanged();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void OnprojectIDChanging(int value);
    partial void OnprojectIDChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    #endregion
		
		public ItemDeployed()
		{
			this._Item = default(EntityRef<Item>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deployedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int deployedID
		{
			get
			{
				return this._deployedID;
			}
			set
			{
				if ((this._deployedID != value))
				{
					this.OndeployedIDChanging(value);
					this.SendPropertyChanging();
					this._deployedID = value;
					this.SendPropertyChanged("deployedID");
					this.OndeployedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", DbType="Int NOT NULL")]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectID", DbType="Int NOT NULL")]
		public int projectID
		{
			get
			{
				return this._projectID;
			}
			set
			{
				if ((this._projectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIDChanging(value);
					this.SendPropertyChanging();
					this._projectID = value;
					this.SendPropertyChanged("projectID");
					this.OnprojectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemDeployed", Storage="_Item", ThisKey="itemID", OtherKey="itemID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemDeployeds.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemDeployeds.Add(this);
						this._itemID = value.itemID;
					}
					else
					{
						this._itemID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ItemDeployed", Storage="_Project", ThisKey="projectID", OtherKey="projectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ItemDeployeds.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ItemDeployeds.Add(this);
						this._projectID = value.projectID;
					}
					else
					{
						this._projectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemIssue")]
	public partial class ItemIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _issueID;
		
		private int _personID;
		
		private int _itemID;
		
		private System.DateTime _dateTaken;
		
		private System.Nullable<System.DateTime> _dateReturned;
		
		private string _itemIssueNote;
		
		private System.Nullable<bool> _itemReturned;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnissueIDChanging(int value);
    partial void OnissueIDChanged();
    partial void OnpersonIDChanging(int value);
    partial void OnpersonIDChanged();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void OndateTakenChanging(System.DateTime value);
    partial void OndateTakenChanged();
    partial void OndateReturnedChanging(System.Nullable<System.DateTime> value);
    partial void OndateReturnedChanged();
    partial void OnitemIssueNoteChanging(string value);
    partial void OnitemIssueNoteChanged();
    partial void OnitemReturnedChanging(System.Nullable<bool> value);
    partial void OnitemReturnedChanged();
    #endregion
		
		public ItemIssue()
		{
			this._Item = default(EntityRef<Item>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_issueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int issueID
		{
			get
			{
				return this._issueID;
			}
			set
			{
				if ((this._issueID != value))
				{
					this.OnissueIDChanging(value);
					this.SendPropertyChanging();
					this._issueID = value;
					this.SendPropertyChanged("issueID");
					this.OnissueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personID", DbType="Int NOT NULL")]
		public int personID
		{
			get
			{
				return this._personID;
			}
			set
			{
				if ((this._personID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonIDChanging(value);
					this.SendPropertyChanging();
					this._personID = value;
					this.SendPropertyChanged("personID");
					this.OnpersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", DbType="Int NOT NULL")]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateTaken", DbType="DateTime NOT NULL")]
		public System.DateTime dateTaken
		{
			get
			{
				return this._dateTaken;
			}
			set
			{
				if ((this._dateTaken != value))
				{
					this.OndateTakenChanging(value);
					this.SendPropertyChanging();
					this._dateTaken = value;
					this.SendPropertyChanged("dateTaken");
					this.OndateTakenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateReturned", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateReturned
		{
			get
			{
				return this._dateReturned;
			}
			set
			{
				if ((this._dateReturned != value))
				{
					this.OndateReturnedChanging(value);
					this.SendPropertyChanging();
					this._dateReturned = value;
					this.SendPropertyChanged("dateReturned");
					this.OndateReturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemIssueNote", DbType="VarChar(100)")]
		public string itemIssueNote
		{
			get
			{
				return this._itemIssueNote;
			}
			set
			{
				if ((this._itemIssueNote != value))
				{
					this.OnitemIssueNoteChanging(value);
					this.SendPropertyChanging();
					this._itemIssueNote = value;
					this.SendPropertyChanged("itemIssueNote");
					this.OnitemIssueNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemReturned", DbType="Bit")]
		public System.Nullable<bool> itemReturned
		{
			get
			{
				return this._itemReturned;
			}
			set
			{
				if ((this._itemReturned != value))
				{
					this.OnitemReturnedChanging(value);
					this.SendPropertyChanging();
					this._itemReturned = value;
					this.SendPropertyChanged("itemReturned");
					this.OnitemReturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemIssue", Storage="_Item", ThisKey="itemID", OtherKey="itemID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemIssues.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemIssues.Add(this);
						this._itemID = value.itemID;
					}
					else
					{
						this._itemID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ItemIssue", Storage="_Person", ThisKey="personID", OtherKey="personID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.ItemIssues.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.ItemIssues.Add(this);
						this._personID = value.personID;
					}
					else
					{
						this._personID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personID;
		
		private string _name;
		
		private string _phoneNumber;
		
		private string _email;
		
		private EntitySet<ItemIssue> _ItemIssues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonIDChanging(int value);
    partial void OnpersonIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Person()
		{
			this._ItemIssues = new EntitySet<ItemIssue>(new Action<ItemIssue>(this.attach_ItemIssues), new Action<ItemIssue>(this.detach_ItemIssues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int personID
		{
			get
			{
				return this._personID;
			}
			set
			{
				if ((this._personID != value))
				{
					this.OnpersonIDChanging(value);
					this.SendPropertyChanging();
					this._personID = value;
					this.SendPropertyChanged("personID");
					this.OnpersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ItemIssue", Storage="_ItemIssues", ThisKey="personID", OtherKey="personID")]
		public EntitySet<ItemIssue> ItemIssues
		{
			get
			{
				return this._ItemIssues;
			}
			set
			{
				this._ItemIssues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemIssues(ItemIssue entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_ItemIssues(ItemIssue entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _projectID;
		
		private string _projectName;
		
		private EntitySet<ItemDeployed> _ItemDeployeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprojectIDChanging(int value);
    partial void OnprojectIDChanged();
    partial void OnprojectNameChanging(string value);
    partial void OnprojectNameChanged();
    #endregion
		
		public Project()
		{
			this._ItemDeployeds = new EntitySet<ItemDeployed>(new Action<ItemDeployed>(this.attach_ItemDeployeds), new Action<ItemDeployed>(this.detach_ItemDeployeds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int projectID
		{
			get
			{
				return this._projectID;
			}
			set
			{
				if ((this._projectID != value))
				{
					this.OnprojectIDChanging(value);
					this.SendPropertyChanging();
					this._projectID = value;
					this.SendPropertyChanged("projectID");
					this.OnprojectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string projectName
		{
			get
			{
				return this._projectName;
			}
			set
			{
				if ((this._projectName != value))
				{
					this.OnprojectNameChanging(value);
					this.SendPropertyChanging();
					this._projectName = value;
					this.SendPropertyChanged("projectName");
					this.OnprojectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ItemDeployed", Storage="_ItemDeployeds", ThisKey="projectID", OtherKey="projectID")]
		public EntitySet<ItemDeployed> ItemDeployeds
		{
			get
			{
				return this._ItemDeployeds;
			}
			set
			{
				this._ItemDeployeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemDeployeds(ItemDeployed entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ItemDeployeds(ItemDeployed entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubType")]
	public partial class SubType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subTypeID;
		
		private int _typeID;
		
		private string _subTypeName;
		
		private string _description;
		
		private EntitySet<Item> _Items;
		
		private EntityRef<Type> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubTypeIDChanging(int value);
    partial void OnsubTypeIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnsubTypeNameChanging(string value);
    partial void OnsubTypeNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public SubType()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Type = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subTypeID
		{
			get
			{
				return this._subTypeID;
			}
			set
			{
				if ((this._subTypeID != value))
				{
					this.OnsubTypeIDChanging(value);
					this.SendPropertyChanging();
					this._subTypeID = value;
					this.SendPropertyChanged("subTypeID");
					this.OnsubTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string subTypeName
		{
			get
			{
				return this._subTypeName;
			}
			set
			{
				if ((this._subTypeName != value))
				{
					this.OnsubTypeNameChanging(value);
					this.SendPropertyChanging();
					this._subTypeName = value;
					this.SendPropertyChanged("subTypeName");
					this.OnsubTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubType_Item", Storage="_Items", ThisKey="subTypeID", OtherKey="subTypeID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_SubType", Storage="_Type", ThisKey="typeID", OtherKey="typeID", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.SubTypes.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.SubTypes.Add(this);
						this._typeID = value.typeID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.SubType = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.SubType = null;
		}
	}
}
#pragma warning restore 1591
